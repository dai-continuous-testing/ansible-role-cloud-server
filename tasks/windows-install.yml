
# validation

- name: assert all vars are set
  assert: 
    that:
      - item is defined
      - item | length > 0
    quiet: true
  loop:
  - app_name
  - temp_folder
  - clear_temp_folder
  - service_name
  - main_class
  - installation_folder
  - clear_before_install
  - server_port
  - installer_file_name
  - s3_download_url
  - launcher_file_name
  - db_connection_string
  - db_username
  # - db_password
  - application_properties
  - xml_conf
  - extra_java_options
  - kill_notepad
  - logs_folder

# required dependencies

- name: make sure chocolatey is installed on the machine
  win_command: "choco.exe --version"
  register: choco_test
  ignore_errors: yes

- name: install chocolatey
  block:
    
    - name: install Chocolatey if its not found
      win_chocolatey:
        name: chocolatey
        state: present
      register: choco_install_first
      ignore_errors: yes

    - name: pause for 60 seconds if first choco install failed
      pause:
        seconds: 60
      when: choco_install_first.rc != 0

    - name: wait more any choco.exe process to finished 
      win_wait_for_process:
        process_name_exact: choco
        state: absent
        timeout: 180
      when: choco_install_first.rc != 0
      failed_when: no
    
    - name: validate if chocolatey is installed on the machine
      win_command: "choco.exe --version"
      when: choco_install_first.rc != 0     

  when: choco_test.rc != 0

- name: disable enhanced exit codes
  win_chocolatey_feature:
    name: useEnhancedExitCodes
    state: disabled

- name: install nssm dependency
  win_chocolatey:
    name: nssm
    state: present

- name: install visual c++ redistributable 2015 dependency
  win_package:
    path: https://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x64.exe
    product_id: '{C146EF48-4D31-3C3D-A2C5-1E91AF8A0A9B}'
    arguments:
    - /install
    - /passive
    - /norestart
  async: 300
  poll: 0
  register: installer_vcredis
  ignore_errors: yes
  become: yes
  
- name: wait for installer visual c++ redistributable
  async_status:
    jid: "{{ installer_vcredis.ansible_job_id }}"
  register: wait_for_installer_vc
  until: wait_for_installer_vc.finished
  retries: 30
  delay: 10
  ignore_errors: yes

# set temp folder

- name: make sure temp folder exists
  win_file:
    path: "{{ temp_folder }}"
    state: directory

# required java dependency

- name: make sure java is installed on the machine
  win_command: "{{ java_bin }} -version"
  register: java_test
  ignore_errors: yes

- name: fail if java is not found
  fail:
    msg: "java must be accesible in path {{ java_bin }}"
  when: java_test.rc != 0

# download the file

- name: download zip from s3 url
  win_get_url:
    url: "{{ s3_download_url }}"
    dest: "{{ temp_folder }}\\{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
    force: no
  when: custom_download_url == ""

- name: download zip from custom url
  win_get_url:
    url: "{{ custom_download_url }}"
    dest: "{{ temp_folder }}\\{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
    force: no
    force_basic_auth: yes
    url_username: "{{ custom_download_username }}"
    url_password: "{{ custom_download_password }}"
  when: custom_download_url != ""

# stop old service

- name: stop the old install4j service if exists
  win_service:
    name: "{{ item }}"
    state: absent
  become: yes 
  with_items:
    - cloudserver

- name: stop the old service
  win_nssm:
    name: "{{ service_name }}"
    state: absent
  become: yes

# kill notepadd

- name: kill notepad apps
  block:
    - name: kill notepad
      win_shell: |
        taskkill /F /IM notepad.exe
      register: killnotepad
      changed_when: killnotepad.rc == 0 and 'The process "notepad.exe" not found.' not in killnotepad.stderr
      failed_when: killnotepad.rc != 0 and 'The process "notepad.exe" not found.' not in killnotepad.stderr
      become: yes

    - name: kill notepad++
      win_shell: |
        taskkill /F /IM notepad++.exe
      register: killnotepadplusplus
      changed_when: killnotepadplusplus.rc == 0 and 'The process "notepad++.exe" not found.' not in killnotepadplusplus.stderr
      failed_when: killnotepadplusplus.rc != 0 and 'The process "notepad++.exe" not found.' not in killnotepadplusplus.stderr
      become: yes

  when: kill_notepad == True
  ignore_errors: yes

# delete old installation (optional)

- name: clear old installation folder
  win_file: 
    path: "{{ installation_folder }}"
    state: absent
  when: clear_before_install == True

# unpack all the files to the installation folder

- name: make sure installation folder exists
  win_file:
    path: "{{ installation_folder }}"
    state: directory
  become: yes

- name: make sure unzip folder exists
  win_file:
    path: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}"
    state: directory
  become: yes

- name: unzip the file
  win_unzip:
    src: "{{ temp_folder }}\\{{ installer_file_name }}"
    dest: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}"
    remote_src: yes
    creates: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}\\{{ convention }}"
  become: yes

- name: copy the file to installation folder
  win_copy:
    src: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}\\{{ convention }}\\"
    dest: "{{ installation_folder }}"
    force: no
    remote_src: yes
  become: yes

- name: copy start script
  win_template:
    src: start.bat.j2
    dest: "{{ installation_folder }}\\{{ launcher_file_name }}"
  become: yes

# configure installed 

- name: update application properties file
  win_lineinfile:
    path: "{{ installation_folder }}\\conf\\application.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ application_properties }}"
  become: yes

- name: update logback properties file
  win_lineinfile:
    path: "{{ installation_folder }}\\conf\\logback.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ logback_properties }}"
  become: yes

- name: update xml conf
  win_lineinfile:
    state: present
    path: "{{ installation_folder }}/conf/cloudserver.conf.xml"
    line: "<{{ item.key }}>{{ item.value }}</{{ item.key }}>"
    regexp: "<{{ item.key }}>.*<\\/{{ item.key }}>"
    insertbefore:  "<\\/forwarder-configuration>"
  with_dict: "{{ xml_conf }}"
  become: yes

- name: make sure logs folder exists
  win_file:
    path: "{{ logs_folder }}"
    state: directory
  become: yes

- name: remove existing logs folder from installation folder
  win_file:
    path: "{{ installation_folder }}\\logs"
    state: absent
  become: yes

- name: create sym link for logs folder
  win_command: "cmd.exe /k mklink /D {{ installation_folder }}\\logs {{ logs_folder }}"
  become: yes

# QUESTION should remove pairing key for cloud ?

# - name: reset pairing key
#   win_file:
#     path: "{{ installation_folder }}\\conf\\pairing.conf.xml"
#     state: absent
#   become: yes

# remove vmoptions file

- name: check vmoptions files to remove
  win_find:
    paths: "{{ installation_folder }}"
    file_type: file
    patterns: "*.vmoptions"
  register: delete_vmoptions
  become: yes

- name: remove vmoptions files from installation folder
  win_file:
    path: "{{ item.path }}"
    state: absent
  become: yes
  with_items:
    - "{{ delete_vmoptions.files }}"

# install the service

- name: create the service
  win_nssm:
    name: "{{ service_name }}"
    application: "{{ installation_folder }}\\{{ launcher_file_name }}"
    stdout_file: "{{ installation_folder }}\\logs\\server.out.log"
    stderr_file: "{{ installation_folder }}\\logs\\server.err.log"
    state: present
  become: yes
  notify:
    - start the service

# always append error logs, not to overwrite files
- name: enable stderr logs to append
  win_command: "nssm set {{ service_name }} AppStderrCreationDisposition 4"
  changed_when: no
  ignore_errors: yes
  become: yes

# expose role output

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      server_port: "{{ server_port }}"
      installation_folder: "{{ installation_folder }}"
      configuration_file: "{{ installation_folder }}\\conf\\application.properties"
      configuration_xml_file: "{{ installation_folder }}\\conf\\cloudserver.conf.xml"
      cloud_backup_dir: "{{ cloud_backup_dir }}"
      java_bin: "{{ java_bin }}"
      service_name: "{{ service_name }}"
